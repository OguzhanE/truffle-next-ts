import { Component } from 'react';
import Head from 'next/head'
import styles from '../styles/Home.module.css'
import SimpleStorageContract from '../lib/contracts/SimpleStorage.json'
import getWeb3 from '../lib/getWeb3'

interface HomeState {
  storageValue: number
  web3: any
  accounts: string[]
  contract: any
  selectedAccount: string
  amount: number
}
export default class Home extends Component<{}, HomeState> {
  state = { storageValue: 0, web3: null, accounts: [], contract: null, selectedAccount: undefined, amount: undefined };

  constructor(props) {
    super(props);
  }

  componentDidMount = async () => {
    try {
      // Get network provider and web3 instance.
      const web3 = await getWeb3();

      // Use web3 to get the user's accounts.
      const accounts = await web3.eth.getAccounts()
      // Get the contract instance.
      const networkId = await web3.eth.net.getId();
      const deployedNetwork = SimpleStorageContract.networks[networkId];
      const instance = new web3.eth.Contract(
        SimpleStorageContract.abi,
        deployedNetwork && deployedNetwork.address,
      );
      
      this.setState({web3, accounts, contract: instance, selectedAccount: accounts[0]}, this.runApp)
    } catch (error) {
      alert('Falied to load web3, accounts, or contract. Check console for details');
      console.error(error);
    }
  }

  runApp = async () => {
    const { contract } = this.state;

    // Get the value from the contract to prove it worked.
    const response = await contract.methods.get().call();

    // Update state with the result.
    this.setState({ storageValue: response });
  }

  handleAccountChange = (event)=>{
    this.setState({selectedAccount: event.target.value});
  }

  handleAmountKeyPress = (event) => {
    if(isNaN(event.key)) {
      event.preventDefault();
    }
  }

  handleAmountChange = (event)=>{
    const amount = parseInt(event.target.value);
    this.setState({
      amount
    });
  }
  
  handleClick = async () => {
    const { amount, selectedAccount, contract } = this.state;
    if(!isNaN(amount)) {
      await contract.methods.set(amount).send({ from: selectedAccount });

      const storageValue = await contract.methods.get().call();

      this.setState({ storageValue });
    }
  }

  render() {
    const { web3, storageValue, accounts, selectedAccount, amount} = this.state;
    if (!web3) {
      return <div>Loading Web3, accounts, and contract...</div>;
    }

    return (
      <div className={styles.container}>
        <Head>
          <title>SimpleStorage</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        <main className={styles.main}>
          <h1 className={styles.title}>
            Simple Storage
          </h1>

          <p className={styles.description}>
            The stored value is: {storageValue}
          </p>
          <div>
            <select value={selectedAccount} className={styles.select} onChange={this.handleAccountChange}>
              {
                accounts.map((account, i) => <option value={account} key={i}>{`${account.substr(0,6)}...${account.substr(account.length-5)}`}</option> )
              }
            </select>
            <div className={styles.row}>
              <input type="text" placeholder="amount" value={amount || ''} className={styles.input} onKeyPress={this.handleAmountKeyPress} onChange={this.handleAmountChange}></input>
              <button className={styles.button} onClick={this.handleClick}>Save</button>
            </div>
          </div>
        </main>
      </div>
    )
  }
}
